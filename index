<html>
<head>
    <meta charset="utf-8">
<style>
/* From StackOverflow -
https://stackoverflow.com/questions/5793214/creating-programming-code-box-on-my-website-w-xhtml-css */
#container {
    padding-left: 2em;
    padding-right: 2em;
    font-family: 'Open Sans', sans-serif;
    line-height: 1.5em;
}

.codebox {
        /* Below are styles for the codebox (not the code itself) */
        border-left:5px solid #70a8e0;
        background-color: #a6c9ed;
        width: 30em;
        overflow: auto;
        padding: 9px;
        border-bottom-right-radius: 10px;
        border-top-right-radius: 10px;
        margin-top: 1em;
        margin-bottom: 1em;

    }
    .codebox code {
        /* Styles in here affect the text of the codebox */
        font-size:1.1em;
        /* You could also put all sorts of styling here, like different font, color, underline, etc. for the code. */
    }

    li {
        margin-left: -1em;
        font-size: 1.1em;
        font-weight: normal,
        list-style-type: none;
        line-height: 2.5em;
    }
    ul .examples {
        font-weight: normal;
        line-height: 1.5em;
    }

    .warning {
        font-size: 1.1em;
        font-weight: normal;
        color: #a33a2a;
    }

</style>
<body>
<div id="container">
  <h1><u>Git Manual</u></h1>
  <div id="commands">
    <ul>
      <li>git checkout -b "branch"</li>
      This command creates a new branch in our local Git repository and then switches to it. It is really
      helpful in dividing our work - in most cases, we use model 'branch-per-feature', which means that
      we create a new branch for every feature we're currently working at. For example,

      when we are about to work on login system, before start we should type in console:
      $ git checkout -b login-system
      <div class="codebox">
        <code>
          <font color="green">$</font> git checkout -b login-system
        </code>
      </div>
      And then, we are good to go, as every change that we'll make from that point before merging or checking out
      to another branch will be saved only in branch 'login-system'. <br />
      The benefits of branching include ease of reverting the changes if something goes wrong
      and provision of isolated environment for every change to the codebase (this ensures that
      the master branch always contains production-quality code). <br />
      Note that:
      <div class="codebox">
      <code>
        <font color="green">$</font> git checkout -b login-system
      </code>
      </div>
      and
      <div class="codebox">
        <code>
          <font color="green">$</font> git branch login-system
			<br/>
          <font color="green">$</font> git checkout login-system
        </code>
      </div>
      are doing exactly the same thing (but the second one in two steps).
      <li>git branch --merged</li>
      List, create, or delete branches. With --merged, only branches merged into the named commit (i.e. the branches whose tip commits are reachable from the named commit) will be listed. <br/> Only list branches whose tips are reachable from the specified commit (HEAD if not specified). Implies --list, incompatible with --no-merged.
      <div class="codebox">
        <code>
          <font color="green">$</font> git branch --merged
        </code>
      </div>
      Example:
      <div class="codebox">
      <code>
        <font color="green">$</font> git branch --merged
		* master
      </code>
      </div>
      <li>git config --global user.email ""</li>
      This command specifies that we're working on git, that we are configuring it and that the configuration that we're making its for every project in the future (that's why --global is being used).<br/>
      If we'd like to use this configuration only for the current project we shouldn't include --global into the command list. User.mail"" specifies that we're making changes into the profile and adding the profile.<br />
      If quotes are not included the command prints out the current email stored in the profile.  Setting your Git username for every repository on your computer. 
$ git config --global user.name ""

Example: 
$ git config --global user.name "Bogdan"
      <div class="codebox">
        <code>
          <font color="green">$</font> git config --global user.email "kevin.verdhi@gmail.com"
        </code>
      </div>As said above:
      <div class="codebox">
      <code>
        <font color="green">$</font> git config --global user.email
      </code>
      </div>
      Prints out the current email stored in the git profile.
      <div class="codebox">
        <code>
          <font color="green">$</font> git config --global user.email
          kevin.verdhi@gmail.com
        </code>
      </div>
      <li>git diff --staged</li>
      Diffing is a function that takes two input data sets and outputs the changes between them. git diff is a multi-use Git command that when executed runs a diff function on Git data sources.<br/>
      When invoked, this command will compare all the differences of the file against the index file.
      These data sources can be commits, branches, files and more. One of the most common things you'll do with "git diff" is to see what changes you've made in your working directory that have not been staged yet.<br />
      In order to see the changes that have been staged already, you can pass the "--staged" option to "git diff":
      <div class="codebox">
        <code>
          <font color="green">$</font> git diff --staged ./path/to/file
        </code>
      </div>
      Typically you would want comparison with the latest commit, so if you do not give commit, it defaults to HEAD. If HEAD does not  exist (e.g. unborn branches) and commit is not given, it shows all staged changes.<br />
      --staged is a synonym of --cached (which is used in pre-1.6 versions of Git).
      <i>Note that --staged and --cached are synonymous options</i>
      <li>git checkout -b "branch"</li>
      This command switches branches or restores working files. Specifying -b causes a new branch to be created as if <code>git-branch</code> were called and then checked out. Meanwhile inside the quotes you specify the name of the branch.<br>
      If -B is given, <i>new_branch</i> is created if it doesn't exist; otherwise, it is reset. This is the transactional equivalent of:
      <div class="codebox">
        <code>
          <font color="green">$</font> git branch -f "branch" ["start point"]<br>
          <font color="green">$</font> git checkout "branch"
        </code>
      </div>
      that is to say, the branch is not reset/created unless "git checkout" is successful.
      <li>git log --graph --all</li>
      The command takes options to control what is shown and how, and options applicable to the <i>git diff-*</i> commands to control how the changes each commit introduces are shown.</br>
      The option <i>--graph</i> draws a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly.</br>
      The option <i>--all</i> pretend as if all the refs in refs/ are listed on the command line as <i>commit</i>.
      <p>Usage</p>
      <div class="codebox">
        <code>
          <font color="green">$</font> git log --all --graph
        </code>
    </div>
    This command can be also upgraded by adding more specifications such as "--decorate , --oneline, --simplifybydecoration" etc.
      <li>git branch -d "branch"-</li>
      To really understand the way Git does branching, we need to take a step back and examine how Git stores its data. Git doesn't store data as a series of changesets or deltas, but instead as a series of snapshots.<br/>
      When you commit in Git, Git stores a commit object that contains a pointer to the snapshot of the content you staged, the author and message metadata, and zero or more pointers to the commit or commits that were the direct parents of this commit: zero parents for the first commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.<br>
      <i>As you can see below, this command creates a branch called test. By default the main branch is called master.</i>
      <div class="codebox">
        <code>
          <font color="green">$</font> git branch test
        </code>
      </div>The option -d deletes a certain branch which should be declared inside the quotes above. Combined the command would be
      <div class="codebox">
      <code>
        <font color="green">$</font> git branch -d "test"
      </code>
      </div> Which deletes the branch called test.
      <p class="warning">ATTENTION!</p>
      To see all the branches that contain work you haven't yet merged in, you can run git branch --no-merged:
      <div class="codebox">
        <code><font color="green">$</font> git branch --no-merged test
</code>
</div>
This shows your other branch. Because it contains work that is NOT merged in yet, trying to delete it with git branch -d will fail:
<div class="codebox">
    <code><font color="green">$</font> git branch -d test
    <br><font color="red">error:</font> The branch '<font color="blue">test</font>' is not fully merged. If you are sure you want to delete it, run 'git branch -D test'.</br></code>
</div>
<ul>
      <li><strong>git config --global user.name ""</strong></li><br />
      Setting your Git username for every repository on your computer.  <br />
      <div class="codebox">
        <code>
          $ git config --global user.name ""
        </code>
      </div> <br />
      Example:  <br />
      <div class="codebox">
      <code>
        $ git config --global user.name "Bogdan"
      </code>
      </div> <br />
    </ul>
      <ul>
      <li><strong>gitk -all</strong></li><br />
      gitk - The Git repository browser. Displays changes in a repository or a selected set of commits. This includes visualizing the commit graph, showing information related to each commit, and the files in the trees of each revision.
--all - Show all refs (branches, tags, etc.).   <br />
      <div class="codebox">
        <code>
        $  gitk -all
        </code>
      </div> <br /><br />
</ul>
    <li>git fetch "remote" "branch"</li>
      When working with other people's repositories, there are a few basic Git commands to remember:
      <ul>
        <li class="examples">git clone</li>
        <li class="examples">git fetch</li>
        <li class="examples">git pull</li>
        <li class="examples">git merge</li>
      </ul>
        You use git fetch to retrieve new work done by other people. Fetching from a repository grabs all the new remote-tracking branches and tags without merging those changes into your own branches.
      <div class="codebox">
        <code>
          <font color="green">$</font> git fetch remotename
          <br><font color="green">#</font> Fetches updates made to a remote repository
        </code>
      </div>
      But it goes further, you can even specify a specific branch by
      <div class="codebox">
      <code>
        <font color="green">$</font> git fetch remotename branchname
        <br><font color="green">#</font> Fetches updates made to a remote branch in a repository</br>
      </code>
      </div>
      <ul>
      <li><strong>git reset HEAD</strong></li><br />
       makes your current branch back to point at SOME-COMMIT  <br />
      <div class="codebox">
        <code>
          $ git reset HEAD
        </code>
      </div> <br />
    </ul>
		
      <li>gitk -all</li>
      <li>gitk -all
      
      show all branches in the graphical interface and it`s changes</li>
     <li>git pull "remote" "branch"</li>
	  Fetch the specified remotes copy of the "branch" and immediately merge it into the local copy.
		"remote" parameter can be either a URL or name of a remote. <br>
		<div class="codebox">
        <code>
          <font color="green">$</font> git pull "remote" "branch"
        </code>
      </div>
      <li>git branch "branch" "commit hash"
      
      create or delete branch and instantly commits it by hashing</li>

      <li>git pull "remote" "branch"
      extracts the specified copy of the panels of the elected "branch" and instantly combines it into a local copy. The "remote" repository is the source of the sampling or pushing operation</li>
    </ul>
<h2>Useful links to learn git</h2>
	<ul>
	<li><a class="links" href="https://try.github.io/levels/1/challenges/1"> Interactive tutorial for beginners</a></li>
	<li><a class="links" href="http://learngitbranching.js.org/">Learn Git Branching</a></li>
	<li><a class="links" href="https://git-scm.com/docs">Git documentation</a></li>
	</ul>
	
	<h1>Learning HTML and CSS Links </h1>
	<ul>
	<li><a class="links" href="https://en.wikipedia.org/wiki/HTML"> Wikipedia</a></li>
	<li><a class="links" href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">Cascading Style Sheets</a></li>
	<li><a class="links" href="https://www.w3schools.com/">w3schools.com</a></li>
	</ul>
	
  </div>
</div>
</body>
</html>



